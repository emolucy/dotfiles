
#+title: Emolucy Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* General Emacs Config

** Default Shell

Changes the shell used inside Emacs.

#+begin_src emacs-lisp

(setq-default explicit-shell-file-name "/opt/homebrew/bin/fish")

#+end_src

** Change Autosave Location

#+begin_src emacs-lisp

(defvar my-auto-save-folder "~/.emacs.d/auto-save/") ;; folder for auto-saves
(setq auto-save-list-file-prefix "~/.emacs.d/auto-save/.saves-") ;; set prefix for auto-saves 
(setq auto-save-file-name-transforms `((".*" ,my-auto-save-folder t))) ;; location for all auto-save files
(setq tramp-auto-save-directory my-auto-save-folder) ;; auto-save tramp files in local directory

#+end_src

** Change Backup Location

#+begin_src emacs-lisp

(setq backup-directory-alist '(("." . "~/.emacs.d/backup/"))
      backup-by-copying      t  ;; Don't de-link hard links
      version-control        t  ;; Use version numbers on backups
      delete-old-versions    t  ;; Automatically delete excess backups:
      kept-new-versions      20 ;; how many of the newest versions to keep
      kept-old-versions      5) ;; and how many of the old versions

#+end_src

** Custom.el

Emacs sometimes tries to automatically add code to your init.el when you do certain ui actions (such as allowing certain themes to be run). This ends up cluttering the init.el file. Luckily, you can move all of this code to a separate file using this command.

#+begin_src emacs-lisp

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)

#+end_src

** Initialize Package Manager

#+begin_src emacs-lisp

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; initialize use-package on non-linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* UI Configuration

** Basic UI Improvements

#+begin_src emacs-lisp

(setq inhibit-startup-message t)

(scroll-bar-mode -1)   ;; disable visual scrollbar
(tool-bar-mode -1)     ;; disable visual toolbar
(tooltip-mode -1)      ;; disable tooltips
(set-fringe-mode 10)   ;; some breathing room
(menu-bar-mode -1)     ;; disable menu bar

;; no beeping!
(setq visible-bell nil)
(setq ring-bell-function 'ignore)

;; relative line numbers
(setq display-line-numbers-type 'relative) 

;; activate line numbering in programming modes
(column-number-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)

#+end_src

** Global Font Size

#+begin_src emacs-lisp

(defvar emo/default-font-size 100)
(defvar emo/default-variable-font-size 100)

#+end_src

** Font Configuration

#+begin_src emacs-lisp

;; set the default face
(set-face-attribute 'default nil :font "Cascadia Code" :height emo/default-font-size)

;; set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height emo/default-variable-font-size :weight 'regular)

#+end_src

** Doom Themes

Gruvbox!

#+begin_src emacs-lisp

(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-gruvbox t)
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom")
  ;; (doom-themes-treemacs-config)
  (doom-themes-org-config))

#+end_src

** Doom Modeline

Remember to run `all-the-icons-install-fonts` on new systems.

#+begin_src emacs-lisp

(use-package all-the-icons
  :ensure t)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

#+end_src

** Ivy and Counsel

Completion framework for commands, buffer switching, finding files.

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

#+end_src

** Helpful

Better describ-* commands.

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** Which Key

Tells you what keybinds are available

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 2))

#+end_src

* Keybinds

** Hydra

Helps create special modes where fast keybindings are needed. Ex: text scaling mode.

#+begin_src emacs-lisp

(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

#+end_src

** General

Powerful keybinding utility. Works well with EVIL mode.

#+begin_src emacs-lisp

(use-package general
  :config
  (general-create-definer emo-def
    :keymaps '(normal visual insert emacs)
    :prefix "C-SPC")
  (emo-def
    "c" 'compile
    "2" 'split-and-follow-horizontally 
    "3" 'split-and-follow-vertically
    "x" 'counsel-M-x
    "b" 'switch-to-buffer
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "ts" '(hydra-text-scale/body :which-key "scale text")
    "tb" '(org-babel-tangle :which-key "tangle the current buffer")))

(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))

#+end_src

** Evil Mode

Vim keybinds.

#+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src

** Misc Keybinds

#+begin_src emacs-lisp

;; make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; change meta key to fn on macos
(setq mac-function-modifier 'meta)
(setq mac-option-modifier nil)

#+end_src

* Org Mode

** Fonts for Org Mode

#+begin_src emacs-lisp

(defun emo/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cascadia Code" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Org Mode Config

The actual org mode config.

#+begin_src emacs-lisp

(defun emo/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 0)
  (visual-line-mode 1))

(use-package org
  :hook (org-mode . emo/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
	org-src-preserve-indentation t
	org-edit-src-content-indentation 0)
  (emo/org-font-setup))

(add-hook 'org-mode-hook
          (lambda () (setq evil-auto-indent nil)))

#+end_src

** Org Bullets

Nice looking bullets in Org mode.

#+begin_src emacs-lisp

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Visual Fill

Centers Org buffers.

#+begin_src emacs-lisp

(defun emo/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . emo/org-mode-visual-fill))

#+end_src

** Structure Templates

Allows aliasing common structures and tab completion.

#+begin_src emacs-lisp

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)))

#+end_src

* Development

** Ligatures

This is a controversial feature, but personally, I like the look of arrow ligatures.

#+begin_src emacs-lisp

(use-package ligature
  ;; :load-path "path-to-ligature-repo"
  :config
  ;; Enable the "www" ligature in every possible major mode
  ;; (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("==>" ">=>" ">>-" ">->" "->>" "-->"
                                       "<==" "<=>" "<=<" "<->" "-<<" "<--"
				       "<-<" "<<-" "=>" "->" "<-" "<==>"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))

#+end_src

** Projectile

Project level completions and navigation.

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/dev")
    (setq projectile-project-search-path '("~/dev")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src

** Magit

Git integration.

#+begin_src emacs-lisp

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Rainbow Delimiters

Makes brackets rainbow. Handy for Lisp.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

